# A short, descriptive name of this building block collection
name: Test Branch
# Short abstract for this collection (optional)
abstract: |
  SKOS—Simple Knowledge Organization System—provides a model for expressing the basic structure and content of
  concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, folksonomies, and other similar types of controlled vocabulary.

description: |
  Many knowledge organization systems, such as thesauri, taxonomies, classification schemes and subject heading
  systems, share a similar structure, and are used in similar applications. SKOS captures much of this similarity
  and makes it explicit, to enable data and technology sharing across diverse applications.

  The SKOS data model provides a standard, low-cost migration path for porting existing knowledge organization systems 
  to the Semantic Web. SKOS also provides a lightweight, intuitive language for developing and sharing new knowledge
  organization systems. It may be used on its own, or in combination with formal knowledge representation languages
  such as the Web Ontology language (OWL).

# Customize the following prefix (will be prepended to the path of the building blocks):
identifier-prefix: ogc.skos.

# List of imports ("default" is an alias for the main OGC Building Blocks Register)
imports:
  - default

# Whether to enable the (highly experimental) downcompiling of JSON schemas to an OpenAPI 3.0-compatible
# version
schema-oas30-downcompile: False

# SPARQL configuration (optional)
#   Authentication can be set through the sparql_username and sparql_password GitHub Workflow inputs
#   (see .github/workflow/process-bblocks.yml)
#
# sparql:
#   push: https://example.com/gsp           # SPARQL Graph Store Protocol endpoint for uploading data
#   graph: https://my.bblocks.example.com/  # SPARQL Graph where data will be uploaded
#                                           #  if left empty, the base URL for the publication will be used
#   query: https://example.com/sparql       # SPARQL query endpoint where data will be available
